#!/usr/bin/env ruby
require 'fileutils'
require 'erb'
require 'securerandom'

def input(label, default: nil)
  print "#{label}: "
  input_string = gets.chomp

  return default if default && input_string.empty?

  input_string
end

def input_list(label, default: nil)
  print "#{label} (comma-separated list): "
  input_string = gets.chomp

  return default if default && input_string.empty?

  input_string.split(",").map!(&:strip)
end

# ----------------------------
# Fetch deployment information
# ----------------------------
params = {}
# Deployment name
puts "Enter the name of the new deployment."
puts "The deployment name can only contain letters and underscores, eg: 'test_environment'."
params[:deployment_name] = input("Deployment name")

if params[:deployment_name].match?( /[^a-zA-Z_]/ )
  puts "The deployment name can only contain letters and underscores. Aborting..."
  abort
end

if File.exists?("hosts/#{params[:deployment_name]}")
  puts "Deployment name #{params[:deployment_name]} already exists. Aborting..."
  abort
end

# Domain
puts
puts "Enter the domain or subdomain on which you'd like to host your Simple server instance"
puts "Eg. api.simple.org"
params[:domain] = input("Domain/Subdomain")

# IP addresses
puts
puts "Enter the public IP addresses of the servers or VMs that will host the following services."
puts "If you don't have the IP addresses yet, you can leave these fields blank, and configure them later."

params[:postgres_primary] = input("Primary postgres database", default: "change-me")
params[:postgres_secondary] = input("Secondary postgres database (hot standby follower)", default: "change-me")
params[:web_servers] = input_list("Web servers", default: ["change-me", "change-me"])
params[:sidekiq_servers] = input_list("Sidekiq background job servers", default: ["change-me", "change-me"])
params[:redis_primary] = input("Primary Redis cache", default: "change-me")
params[:redis_secondary] = input("Secondary Redis cache (hot standby follower)", default: "change-me")
params[:prometheus] = input("Prometheus (system monitoring tool)", default: "change-me")
params[:grafana] = input("Grafana (dashboards for viewing Prometheus data)", default: "change-me")
params[:storage] = input("Storage of application logs, audit logs, and database backups", default: "change-me")
params[:load_balancing] = input("Load balancer (this server will be the entry point for all incoming web traffic)", default: "change-me")

# Ansible vault password
puts
puts "Would you like to generate an Ansible vault password for this deployment? Select No if you already have an Ansible"
puts "vault password that you plan to use"
create_ansible_vault_password = input("Generate Ansible vault password? (y/N)") == "y"

# ----------------------------
# Set up deployment files
# ----------------------------
project_path = File.expand_path("..", File.dirname(__FILE__))
templates_path = File.expand_path("bin/templates", project_path)
hosts_path = File.expand_path("hosts", project_path)
group_vars_path = File.expand_path("group_vars/#{params[:deployment_name]}", project_path)
puts

# Ansible inventory file
inventory_template = ERB.new(File.read("#{templates_path}/inventory.erb"))
inventory = inventory_template.result_with_hash(params)
File.write("#{hosts_path}/#{params[:deployment_name]}", inventory)
puts "Created #{hosts_path}/#{params[:deployment_name]}..."

# Group vars directory
FileUtils.mkdir(group_vars_path)

# Vars
vars_template = ERB.new(File.read("#{templates_path}/vars.yml.erb"))
vars = vars_template.result_with_hash(params)
File.write("#{group_vars_path}/vars.yml", vars)
puts "Created #{group_vars_path}/vars.yml..."

# Vault
secret_key_base = SecureRandom.hex(128)
vault_template = ERB.new(File.read("#{templates_path}/vault.yml.decrypted.erb"))
vault = vault_template.result_with_hash(params)
File.write("#{group_vars_path}/vault.yml.decrypted", vault)
puts "Created #{group_vars_path}/vault.yml.decrypted..."

# Ansible vault identity list
# Parse the ansible vault identity list
#    vault_identity_list = id@path, id@path
# into a list of vault identities and add a new identity to the end
vault_password_path = "~/.vault_password_#{params[:deployment_name]}"
ansible_config = File.readlines("#{project_path}/ansible.cfg")
vault_identity_index = ansible_config.index {|x| x.start_with?("vault_identity_list")}
vault_identity_list = ansible_config[vault_identity_index].split("=").last
vault_identities = vault_identity_list.split(",").map!(&:strip)
vault_identities.push("#{params[:deployment_name]}@#{vault_password_path}")

ansible_config[vault_identity_index] = "vault_identity_list = #{vault_identities.join(", ")}"

File.write("#{project_path}/ansible.cfg", ansible_config.join)
puts "Updated #{project_path}/ansible.cfg..."

# Ansible vault password
File.write(File.expand_path(vault_password_path), SecureRandom.alphanumeric(256)) if create_ansible_vault_password
puts "Created #{File.expand_path(vault_password_path)}..."

# ----------------------------
# Print next steps
# ----------------------------
puts
puts "#{params[:deployment_name]} deployment environment initialized!"
puts "To finish setup, follow these steps"
puts "- If you skipped entering any IP addresses, enter them into your Ansible inventory file hosts/#{params[:deployment_name]}"
puts "- Configure your instance's variables in group_vars/#{params[:deployment_name]}/vars.yml"
puts "- Configure your instance's secrets in group_vars/#{params[:deployment_name]}/vault.yml.decrypted"
puts "- Create an Ansible vault password and place it in a file at ~/.vault_password_#{params[:deployment_name]}" unless create_ansible_vault_password
puts "- Create your vault file by running `make encrypt hosts=#{params[:deployment_name]}`"
puts
puts "And you're done! You can then deploy Simple onto your servers with `make all hosts=#{params[:deployment_name]}`"
