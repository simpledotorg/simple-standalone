---
- name: Define postgresql version
  set_fact:
    postgresql_version: "14"
  when: postgresql_version is not defined

- name: Define postgresql_daemon.
  set_fact:
    postgresql_daemon: "postgresql@{{ postgresql_version }}-main"
  when: postgresql_daemon is not defined

- name: ensure apt-transport-https is installed
  apt: name=apt-transport-https state=present
  become: true

- name: add postgresql apt key
  apt_key:
    url:  https://www.postgresql.org/media/keys/ACCC4CF8.asc
    state: present
  become: true

- name: add postgresql repositories
  apt_repository:
    repo: "deb http://apt.postgresql.org/pub/repos/apt/ {{ ansible_distribution_release }}-pgdg main"
    state: present
  register: postgres_repo
  become: true

- name: update apt cache if repo was added
  apt: update_cache=yes
  when: postgres_repo.changed
  become: true

- name: Ensure PostgreSQL dependencies are installed.
  apt:
    pkg:
      - python3-psycopg2
      - libpq-dev
      - python-ipaddress
    state: present
  become: true

- name: Ensure PostgreSQL 14 packages are installed.
  apt:
    pkg:
      - postgresql-14
      - postgresql-contrib-14
    state: present
  become: true

- name: Ensure all configured locales are present.
  locale_gen:
    name: "{{ postgres.locale }}"
    state: present
  register: locale_gen_result

- name: Ensure data directory is initialized
  command: "{{ postgresql_bin_path }}/initdb -D {{ postgresql_data_dir }}"
  args:
    creates: "{{ postgresql_data_dir }}"
  become: true
  become_user: postgres

- name: Grant the default permisions for pg_hba conf.
  with_items: "{{ postgres.pg_hba }}"
  postgresql_pg_hba:
    dest: "/etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf"
    contype: "{{ item.contype }}"
    users: "{{ item.users }}"
    source: "{{ item.source | default('::1') }}"
    databases: "{{ item.databases }}"
    method: "{{ item.method }}"
    create: true
    backup: true
  register: postgres_hba_conf
  become: true
  become_user: postgres

- name: Force-restart PostgreSQL after new locales are generated.
  service:
    name: "{{ postgresql_daemon }}"
    state: restarted
  when: locale_gen_result.changed
  become: true

- name: Create Postgresql database
  postgresql_db:
    name: "{{ database_name }}"
  become: true
  become_user: postgres

- name: Create Postgresql user
  postgresql_user:
    name: "{{ database.username }}"
    password: "{{ database.password }}"
    db: "{{ database_name }}"
    encrypted: true
    role_attr_flags: 'SUPERUSER'
    priv: 'ALL'
  become: true
  become_user: postgres

- name: Create Metabase Postgresql database
  postgresql_db:
    name: "{{ metabase_database_name }}"
  become: true
  become_user: postgres

- name: Create Metabase Postgresql user
  postgresql_user:
    name: "{{ metabase_database.username }}"
    password: "{{ metabase_database.password }}"
    db: "{{ metabase_database_name }}"
    encrypted: true
    role_attr_flags: NOCREATEDB,NOSUPERUSER
    priv: 'ALL'
  become: true
  become_user: postgres

- name: Allow postgres to accept all connections
  postgresql_set:
    name: listen_addresses
    value: "*"
  register: postgres_listen_addresses
  become: true
  become_user: postgres

- name: Restart postgresql
  service:
    name: "{{ postgresql_daemon }}"
    state: restarted
  when: postgres_listen_addresses.changed
  become: true

- name: Reload postgresql
  service:
    name: "{{ postgresql_daemon }}"
    state: reloaded
  when: postgres_hba_conf.changed
  become: true

- name: copy .pgpass file
  template:
    src: .pgpass
    dest: ~/.pgpass
    mode: 0600

- name: copy backup dump script
  template:
    src: pg_backup.sh
    dest: pg_backup.sh
    mode: +x

- name: create backups directory on storage
  file:
    path: "{{ backups_destination_dir }}"
    state: directory
  become: true
  become_user: "{{ deploy_user }}"
  delegate_to: "{{ item }}"
  with_items: "{{ groups.storage }}"

- name: setup cron job to generate backups (and ship if storage host exists)
  cron:
    name: "postgres backup"
    minute: "0"
    hour: "0"
    job: "./pg_backup.sh"
