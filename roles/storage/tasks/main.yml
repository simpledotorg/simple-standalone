# Sets up SSH keys on the storage server so that other servers can rsync.
- name: generate ssh keys for remote user
  openssh_keypair:
    path: ~/.ssh/id_rsa

- name: generate ssh keys for root user
  openssh_keypair:
    path: ~/.ssh/id_rsa
  become: true

- name: fetch remote user ssh keys to be added to storage server
  fetch:
    src: "~/.ssh/id_rsa.pub"
    dest: "/tmp/keys/{{ inventory_hostname }}-remote-user-id_rsa.pub"
    flat: yes

- name: fetch root user ssh keys to be added to storage server
  fetch:
    src: "~/.ssh/id_rsa.pub"
    dest: "/tmp/keys/{{ inventory_hostname }}-root-user-id_rsa.pub"
    flat: yes
  become: true

- name: add keys to the storage server
  authorized_key:
    key: "{% for key in query('fileglob', '/tmp/keys/*') %}{{ lookup('file', key) ~ '\n'}}{% endfor %}"
    user: "{{ deploy_user }}"
    # This is to avoid conflict with authorized_keys, which is cleared with keys present in the ssh role.
    # AuthorizedKeysFile looks at authorized_keys2 by default.
    path: "/home/{{ deploy_user }}/.ssh/authorized_keys2"
  become: true
  delegate_to: "{{ item }}"
  with_items: "{{ groups.storage }}"
